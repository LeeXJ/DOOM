终于，DOOM源代码发布了，供非盈利用途。使用此代码，你仍然需要真实的DOOM数据。如果你并没有真正拥有DOOM的一个副本，你仍然应该能够在软件商店找到它们。

非常感谢Bernd Kreimeier花时间整理这个项目，确保它确实可用。如果你把项目放置一段时间，它往往会变得混乱，需要有人再次处理它。

不好的消息是，这个代码只能在Linux上编译和运行。我们无法发布DOS代码，因为我们使用了一个有版权的声音库（哇，那真是一个错误 -- 现在我编写自己的声音代码了），而且我甚至不知道微软为Windows做的那个移植到底发生了什么事。

不过，这份代码相当可移植，几乎可以在任何平台上直接使用。

我写下这段代码很久以前，回顾起来有很多事情似乎显得很傻（使用极坐标进行裁剪就是其中之一），但总体而言，它仍然是一个可以进行实验和建设的有用基础。

基本的渲染概念 -- 以恒定Z的水平和垂直线为基础，每个带有固定光照的线条都是正确的，但如果重新审视原始代码，实现可以从根本上改进。渲染从墙到地板再到精灵的过程可以合并成对bsp树的单一的自底向上遍历，以收集信息，然后在回溯时绘制子扇区的所有内容。这需要将地板和天花板视为多边形，而不仅仅是墙之间的空隙，并且需要将精灵广告牌裁剪成子扇区片段，但这将是正确的做法。

回顾中，我看到移动和对线的视线检查是其中一个较大的失误之一。这是一段混乱的代码，有一些失败的情况，而在我面前有一个明显更简单（而且更快）的解决方案。我使用BSP树来渲染物体，但当时我并没有意识到它也可以用于环境测试。用BSP线剪辑替换视线测试将会相当容易。对移动进行体积扫描变得有点困难，并且涉及到与多面体边缘倒角相关的Quake / Quake2中的许多挑战。

一些建议：

1. 将其移植到你喜欢的操作系统。

2. 添加一些渲染功能 -- 透明度、上下查看、坡度等。

3. 添加一些游戏功能 -- 武器、跳跃、蹲伏、飞行等。

4. 创建一个基于数据包服务器的互联网游戏。

5. 创建一个基于客户端/服务器的互联网游戏。

6. 制作一个3D加速版本。在现代硬件上（快速的Pentium + 3DFX），你可能甚至不需要太聪明 -- 你可以直接绘制整个关卡并获得合理的速度。稍加努力，它应该很容易锁定在60 fps（好吧，DOOM的35 Hz时间基准存在一些问题...）。最大的问题可能是非二次幂的纹理大小和由多个纹理组成的墙壁。

我不太清楚会有多少人会玩这个，但如果有人着手进行重要的项目，看到社区合作的水平将是很酷的。我知道大多数早期的项目都会是在孤立中完成的初步尝试，但我会很高兴看到明年在多个平台上发布的改进的、向后兼容的DOOM版本的协调的“网络发布”。

玩得开心。

John Carmack
1997年12月23日

版权所有（c）ZeniMax Media Inc.
根据GNU通用公共许可证2.0许可。